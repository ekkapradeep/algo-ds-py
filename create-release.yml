trigger:
  branches:
    include:
      - main

variables:
  fixVersion: '1.0.0'

stages:
  - stage: ReleaseBranch
    displayName: "Create/Update Release Branch"
    jobs:
      - job: CreateReleaseBranch
        displayName: "Create or Update Release Branch for FixVersion"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            displayName: "Create/Update Release Branch with Cherry-Picked Commits"
            inputs:
              targetType: 'inline'
              pwsh: true
              script: |
                param(
                  [string]$fixVersion = "${{ variables.fixVersion }}"
                )

                Write-Host "üöÄ Starting release branch update for FixVersion: ${fixVersion}"

                # === Configuration ===
                $orgUrl = "https://pradeepekka.visualstudio.com"
                $project = "Algo-ds-Py"
                $repo = "algo-ds-py"
                $releaseBranch = "release/${fixVersion}"
                $token = "$(System.AccessToken)"
                $headers = @{ 
                    Authorization = "Bearer $token"
                    "Content-Type" = "application/json"
                }

                # === STEP 1: Fetch Work Items ===
                Write-Host "##[section]üîç Fetching work items for FixVersion: ${fixVersion}"
                $wiql = @{
                    query = "SELECT [System.Id] FROM WorkItems WHERE [System.TeamProject] = '$project' AND [Custom.FixVersion] = '$fixVersion'"
                } | ConvertTo-Json

                $wiqlUrl = "$orgUrl/$project/_apis/wit/wiql?api-version=7.0"

                try {
                    $wiqlResult = Invoke-RestMethod -Uri $wiqlUrl -Method Post -Headers $headers -Body $wiql
                    if (-not $wiqlResult.workItems) {
                        Write-Host "##[warning]No work items found for FixVersion '$fixVersion'"
                        exit 0
                    }
                    $workItemIds = $wiqlResult.workItems | ForEach-Object { $_.id }
                    Write-Host "‚úÖ Found work items: $($workItemIds -join ', ')"
                } catch {
                    Write-Host "##[error]Failed to fetch work items: $($_.Exception.Message)"
                    exit 1
                }

                # === STEP 2: Collect PRs and Commits ===
                $cherryPickCommits = @()

                foreach ($wiId in $workItemIds) {
                    Write-Host "##[section]üì¶ Processing Work Item #$wiId"

                    $wiUrl = "$orgUrl/$project/_apis/wit/workitems/$wiId?`$expand=relations&api-version=7.0"
                    try {
                        $wi = Invoke-RestMethod -Uri $wiUrl -Headers $headers
                        $prLinks = $wi.relations | Where-Object { $_.rel -eq "ArtifactLink" -and $_.url -like "*PullRequest*" }
                        if (-not $prLinks) {
                            Write-Host "‚ö†Ô∏è No PR links for work item $wiId"
                            continue
                        }

                        foreach ($prLink in $prLinks) {
                            if ($prLink.url -match "vstfs:///Git/PullRequestId/(\d+)") {
                                $prId = $matches[1]
                                Write-Host "üîó Checking PR #$prId"

                                $prUrl = "$orgUrl/$project/_apis/git/repositories/$repo/pullRequests/$prId?api-version=7.0"
                                try {
                                    $pr = Invoke-RestMethod -Uri $prUrl -Headers $headers
                                    if ($pr.status -eq "completed" -and $pr.mergeStatus -eq "succeeded") {
                                        $mergeCommit = $pr.lastMergeCommit.commitId
                                        Write-Host "‚úÖ PR #$prId merged with commit $mergeCommit"
                                        $cherryPickCommits += $mergeCommit
                                    } else {
                                        Write-Host "üö´ PR #$prId not merged"
                                    }
                                } catch {
                                    Write-Host "##[error]Failed to fetch PR #$prId: $($_.Exception.Message)"
                                }
                            }
                        }
                    } catch {
                        Write-Host "##[error]Failed to get work item $wiId: $($_.Exception.Message)"
                    }
                }

                if (-not $cherryPickCommits) {
                    Write-Host "##[warning]No commits found to cherry-pick."
                    exit 0
                }

                Write-Host "‚úÖ Commits to cherry-pick: $($cherryPickCommits -join ', ')"

                # === STEP 3: Create or Update Release Branch ===
                git config --global user.email "build@azure.dev"
                git config --global user.name "Azure DevOps"

                git fetch origin
                $branchExists = git ls-remote --heads origin $releaseBranch

                if ($branchExists) {
                    Write-Host "üì¶ Release branch exists. Checking out..."
                    git checkout $releaseBranch
                    git pull origin $releaseBranch
                } else {
                    Write-Host "üå± Creating new release branch from main..."
                    git checkout main
                    git pull origin main
                    git checkout -b $releaseBranch
                }

                # === STEP 4: Cherry-pick PR merge commits ===
                foreach ($commit in $cherryPickCommits) {
                    try {
                        Write-Host "üîß Cherry-picking commit $commit..."
                        git cherry-pick $commit
                    } catch {
                        Write-Host "‚ö†Ô∏è Conflict occurred while cherry-picking commit $commit"
                        git cherry-pick --abort
                        Write-Host "Skipping commit $commit due to conflict."
                    }
                }

                # === STEP 5: Push Updated Branch ===
                Write-Host "üì§ Pushing updated release branch..."
                git push origin $releaseBranch

                Write-Host "üéâ Release branch '${releaseBranch}' updated with cherry-picked commits!"
