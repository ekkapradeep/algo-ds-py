trigger: none

parameters:
  - name: fixVersion
    displayName: "Release Version (FixVersion)"
    type: string
    default: ""

pool:
  vmImage: ubuntu-latest

steps:
  - checkout: self
    persistCredentials: true

  - task: PowerShell@2
    displayName: "Create or Update Release Branch for FixVersion"
    inputs:
      targetType: "inline"
      script: |
        param(
          [string]$fixVersion = "$(fixVersion)",
          [string]$org = "$(System.CollectionUri)",
          [string]$project = "$(System.TeamProject)",
          [string]$repo = "$(Build.Repository.Name)"
        )

        if (-not $fixVersion) {
          Write-Error "‚ùå A value for the 'fixVersion' parameter must be provided."
          exit 1
        }

        Write-Host "üöÄ Starting release preparation for FixVersion = $fixVersion"

        # Prepare headers for ADO REST calls
        $headers = @{
          Authorization = "Basic $env:SYSTEM_ACCESSTOKEN"
          "Content-Type" = "application/json"
        }

        # --- Step 1: Get all work items with the FixVersion tag ---
        Write-Host "üîç Fetching work items tagged with FixVersion:$fixVersion..."

        $wiqlBody = @{
          query = "SELECT [System.Id] FROM WorkItems WHERE [System.TeamProject] = '$project' AND [System.Tags] CONTAINS 'FixVersion:$fixVersion'"
        } | ConvertTo-Json

        $wiqlUrl = "https://dev.azure.com/$($org.TrimEnd('/'))/$project/_apis/wit/wiql?api-version=7.0"
        $wiqlResult = Invoke-RestMethod -Uri $wiqlUrl -Headers $headers -Method Post -Body $wiqlBody

        if (-not $wiqlResult.workItems) {
          Write-Host "‚ö†Ô∏è No work items found for FixVersion:$fixVersion. Exiting..."
          exit 0
        }

        $approvedCommits = @()
        Write-Host "üìã Found $($wiqlResult.workItems.Count) work items"

        # --- Step 2: Process each Work Item ---
        foreach ($wiRef in $wiqlResult.workItems) {
          $wiId = $wiRef.id
          Write-Host "`nüîó Checking linked PRs for Work Item #$wiId"

          $wiUrl = "https://dev.azure.com/$($org.TrimEnd('/'))/$project/_apis/wit/workitems/$wiId?api-version=7.0"
          try {
            $wi = Invoke-RestMethod -Uri $wiUrl -Headers $headers
          } catch {
            Write-Host "‚ùå Failed to fetch Work Item #${wiId}: $($_.Exception.Message)"
            continue
          }

          $prRelations = $wi.relations | Where-Object { $_.attributes.name -eq "Pull Request" }

          if (-not $prRelations) {
            Write-Host "‚ö†Ô∏è No PRs linked to Work Item #${wiId}"
            continue
          }

          $allPRsApproved = $true

          foreach ($pr in $prRelations) {
            $prUrl = $pr.url
            $prDetails = Invoke-RestMethod -Uri "$prUrl?api-version=7.0" -Headers $headers

            $status = $prDetails.status
            $approved = ($prDetails.reviewers | Where-Object { $_.vote -eq 10 }).Count -gt 0

            if ($status -ne "completed" -or -not $approved) {
              Write-Host "üö´ PR #$($prDetails.pullRequestId) is not approved or completed (Status=$status, Approved=$approved)"
              $allPRsApproved = $false
            }
          }

          if (-not $allPRsApproved) {
            Write-Host "‚ùå Removing Work Item #${wiId} (not all PRs approved)"
            continue
          }

          Write-Host "‚úÖ All PRs approved for Work Item #${wiId} ‚Äî collecting commits..."

          foreach ($pr in $prRelations) {
            $prUrl = $pr.url
            $prDetails = Invoke-RestMethod -Uri "$prUrl?api-version=7.0" -Headers $headers
            $commitsUrl = "$($prDetails.url)/commits?api-version=7.0"
            $commits = Invoke-RestMethod -Uri $commitsUrl -Headers $headers
            $approvedCommits += $commits.value | ForEach-Object { $_.commitId }
          }
        }

        if (-not $approvedCommits) {
          Write-Host "‚ö†Ô∏è No approved PR commits found for FixVersion $fixVersion. Exiting..."
          exit 0
        }

        # --- Step 3: Create or update release branch ---
        $releaseBranch = "release/$fixVersion"
        Write-Host "`nüåø Preparing release branch: $releaseBranch"

        if (-not (Test-Path ".git")) {
          git clone "$(Build.Repository.Uri)" repo
          Set-Location repo
        }

        git fetch origin

        if (git rev-parse --verify "origin/$releaseBranch" 2>$null) {
          Write-Host "üîÑ Updating existing branch $releaseBranch"
          git checkout $releaseBranch
        } else {
          Write-Host "üå± Creating new branch $releaseBranch from origin/main"
          git checkout -b $releaseBranch origin/main
        }

        foreach ($sha in $approvedCommits | Select-Object -Unique) {
          Write-Host "‚¨áÔ∏è Cherry-picking commit $sha"
          git cherry-pick $sha 2>$null || Write-Host "‚ö†Ô∏è Skipped commit $sha (already merged or conflict)"
        }

        git push origin $releaseBranch
        Write-Host "‚úÖ Release branch '$releaseBranch' updated successfully."

    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
