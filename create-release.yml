trigger:
  branches:
    include:
      - main

variables:
  fixVersion: "1.2.3"   # Update this value or override at queue time

stages:
  - stage: ReleaseBranch
    displayName: "Create/Update Release Branch"
    jobs:
      - job: CreateReleaseBranch
        displayName: "Create or Update Release Branch"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            persistCredentials: true  # Required for git push using system token

          - task: PowerShell@2
            displayName: "Create/Update Release Branch for FixVersion"
            inputs:
              targetType: 'inline'
              pwsh: true
              script: |
                # =========================================
                # Azure DevOps Release Branch Automation
                # =========================================

                $fixVersion = "$(fixVersion)"

                if ([string]::IsNullOrWhiteSpace($fixVersion)) {
                    Write-Error "‚ùå The pipeline variable 'fixVersion' is not set. Please provide a value."
                    exit 1
                }

                Write-Host "üöÄ Starting release branch update for FixVersion: $fixVersion"

                $orgUrl = "https://dev.azure.com/$(System.TeamProject)"
                $project = "$(System.TeamProject)"
                $repo = "$(Build.Repository.Name)"
                $releaseBranch = "release/$fixVersion"
                $token = "$(System.AccessToken)"
                $headers = @{ Authorization = "Bearer $token" }

                # Fetch work items
                $wiql = @{
                    query = "SELECT [System.Id] FROM WorkItems WHERE [System.TeamProject] = '$project' AND [Custom.FixVersion] = '$fixVersion'"
                } | ConvertTo-Json

                $wiqlUrl = "$orgUrl/$project/_apis/wit/wiql?api-version=7.0"
                try {
                    $wiqlResult = Invoke-RestMethod -Uri $wiqlUrl -Method Post -Headers $headers -Body $wiql -ContentType "application/json"
                } catch {
                    Write-Error "‚ùå Failed to fetch work items: $_"
                    exit 1
                }

                if (-not $wiqlResult.workItems) {
                    Write-Host "‚ö†Ô∏è No work items found for FixVersion $fixVersion"
                    exit 0
                }

                $finalWorkItems = @()
                foreach ($wi in $wiqlResult.workItems) {
                    $wiId = $wi.id
                    $relationsUrl = "$orgUrl/$project/_apis/wit/workitems/$wiId?`$expand=relations&api-version=7.0"

                    try {
                        $wiDetails = Invoke-RestMethod -Uri $relationsUrl -Headers $headers
                        $prLinks = $wiDetails.relations | Where-Object { $_.rel -eq "ArtifactLink" -and $_.url -like "*PullRequest*" }

                        if (-not $prLinks) {
                            Write-Host "‚ö†Ô∏è Work item #$wiId has no linked PRs. Skipping..."
                            continue
                        }

                        $allApproved = $true
                        foreach ($prLink in $prLinks) {
                            if ($prLink.url -match "vstfs:///Git/PullRequestId/(\d+)") {
                                $prId = $matches[1]
                                $prApiUrl = "$orgUrl/$project/_apis/git/repositories/$repo/pullRequests/$prId?api-version=7.0"
                                $pr = Invoke-RestMethod -Uri $prApiUrl -Headers $headers

                                if ($pr.status -ne "completed" -or $pr.mergeStatus -ne "succeeded") {
                                    Write-Host "‚ùå PR #$prId for Work Item #$wiId is not approved or merged yet."
                                    $allApproved = $false
                                    break
                                }
                            }
                        }

                        if ($allApproved) {
                            Write-Host "‚úÖ Work Item #$wiId has all PRs approved."
                            $finalWorkItems += $wiId
                        } else {
                            Write-Host "üö´ Skipping Work Item #$wiId because not all PRs approved."
                        }

                    } catch {
                        Write-Host "‚ùå Failed to fetch Work Item #$wiId: $_"
                    }
                }

                if (-not $finalWorkItems) {
                    Write-Host "‚ö†Ô∏è No work items qualify for release."
                    exit 0
                }

                # Prepare release branch
                git fetch origin
                $branchExists = (git branch -r | Select-String "origin/$releaseBranch")

                if ($branchExists) {
                    Write-Host "üì¶ Release branch exists. Updating..."
                    git checkout $releaseBranch
                    git pull origin $releaseBranch
                } else {
                    Write-Host "üå± Creating new release branch from main..."
                    git checkout main
                    git pull origin main
                    git checkout -b $releaseBranch
                }

                # Merge PRs
                foreach ($wiId in $finalWorkItems) {
                    Write-Host "üîó Processing PRs for Work Item #$wiId..."
                    $relationsUrl = "$orgUrl/$project/_apis/wit/workitems/$wiId?`$expand=relations&api-version=7.0"
                    $wiDetails = Invoke-RestMethod -Uri $relationsUrl -Headers $headers
                    $prLinks = $wiDetails.relations | Where-Object { $_.rel -eq "ArtifactLink" -and $_.url -like "*PullRequest*" }

                    foreach ($prLink in $prLinks) {
                        if ($prLink.url -match "vstfs:///Git/PullRequestId/(\d+)") {
                            $prId = $matches[1]
                            $prApiUrl = "$orgUrl/$project/_apis/git/repositories/$repo/pullRequests/$prId?api-version=7.0"
                            $pr = Invoke-RestMethod -Uri $prApiUrl -Headers $headers

                            if ($pr.status -eq "completed" -and $pr.mergeStatus -eq "succeeded") {
                                $sourceBranch = $pr.sourceRefName.Replace("refs/heads/", "")
                                Write-Host "üîÄ Merging commits from branch: $sourceBranch"
                                git fetch origin $sourceBranch
                                git merge origin/$sourceBranch --no-edit
                            }
                        }
                    }
                }

                # Push release branch
                git push origin $releaseBranch
                Write-Host "üéâ Release branch $releaseBranch updated successfully."
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
