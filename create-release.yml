trigger:
  branches:
    include:
      - main

variables:
  fixVersion: '1.0.0'

stages:
  - stage: ReleaseBranch
    displayName: "Create/Update Release Branch with Cherry-Picked Commits"
    jobs:
      - job: CreateReleaseBranch
        displayName: "Create or Update Release Branch for FixVersion"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            displayName: "Create/Update Release Branch with Cherry-Picked Commits"
            inputs:
              targetType: 'inline'
              pwsh: true
              script: |
                param(
                  [string]$fixVersion = "${{ variables.fixVersion }}"
                )

                Write-Host "üöÄ Starting release branch update for FixVersion: ${fixVersion}"

                # --- CONFIGURATION ---
                $orgUrl = "https://pradeepekka.visualstudio.com"
                $project = "Algo-ds-Py"
                $repo = "algo-ds-py"
                $releaseBranch = "release/${fixVersion}"
                $token = "$(System.AccessToken)"

                $headers = @{
                  Authorization = "Bearer $token"
                  "Content-Type" = "application/json"
                }

                Write-Host "Configuration:"
                Write-Host "  Org: $orgUrl"
                Write-Host "  Project: $project"
                Write-Host "  Repo: $repo"
                Write-Host "  Release Branch: $releaseBranch"

                # --- STEP 1: Get Work Items for FixVersion ---
                Write-Host "##[section]üîç Fetching Work Items for FixVersion = ${fixVersion}..."

                $wiql = @{
                  query = "SELECT [System.Id], [System.Title] FROM WorkItems WHERE [System.TeamProject] = '$project' AND [Custom.FixVersion] = '$fixVersion'"
                } | ConvertTo-Json

                $wiqlUrl = "$orgUrl/$project/_apis/wit/wiql?api-version=7.0"
                try {
                  $wiqlResult = Invoke-RestMethod -Uri $wiqlUrl -Method Post -Headers $headers -Body $wiql
                } catch {
                  Write-Host "##[error]Failed to fetch work items: $($_.Exception.Message)"
                  exit 1
                }

                if (-not $wiqlResult.workItems -or $wiqlResult.workItems.Count -eq 0) {
                  Write-Host "‚ö†Ô∏è No work items found for FixVersion '${fixVersion}'."
                  exit 0
                }

                Write-Host "‚úÖ Found $($wiqlResult.workItems.Count) Work Item(s)."

                # --- STEP 2: Validate linked PRs ---
                $qualifiedWorkItems = @()
                $cherryPickCommits = @()

                foreach ($wi in $wiqlResult.workItems) {
                  $wiId = $wi.id
                  Write-Host "##[section]Processing Work Item #${wiId}..."

                  $wiUrl = "$orgUrl/$project/_apis/wit/workitems/$wiId?`$expand=relations&api-version=7.0"
                  try {
                    $wiDetails = Invoke-RestMethod -Uri $wiUrl -Headers $headers
                  } catch {
                    Write-Host "##[error]Failed to fetch Work Item #${wiId}: $($_.Exception.Message)"
                    continue
                  }

                  $prLinks = @()
                  if ($wiDetails.relations) {
                    $prLinks = $wiDetails.relations | Where-Object { $_.rel -eq "ArtifactLink" -and $_.url -like "*PullRequest*" }
                  }

                  if (-not $prLinks -or $prLinks.Count -eq 0) {
                    Write-Host "‚ö†Ô∏è No PRs linked to Work Item #${wiId}. Skipping."
                    continue
                  }

                  $allApproved = $true

                  foreach ($prLink in $prLinks) {
                    if ($prLink.url -match "vstfs:///Git/PullRequestId/(\d+)") {
                      $prId = $matches[1]
                      Write-Host "üîó Checking PR #${prId}..."

                      $prUrl = "$orgUrl/$project/_apis/git/repositories/$repo/pullRequests/$prId?api-version=7.0"
                      try {
                        $pr = Invoke-RestMethod -Uri $prUrl -Headers $headers
                        if ($pr.status -eq "completed" -and $pr.mergeStatus -eq "succeeded") {
                          $mergeCommit = $pr.lastMergeCommit.commitId
                          Write-Host "‚úÖ PR #${prId} merged successfully with commit ${mergeCommit}"
                          $cherryPickCommits += $mergeCommit
                        } else {
                          Write-Host "üö´ PR #${prId} not yet merged or failed."
                          $allApproved = $false
                          break
                        }
                      } catch {
                        Write-Host "##[error]Failed to fetch PR #${prId}: $($_.Exception.Message)"
                        $allApproved = $false
                        break
                      }
                    }
                  }

                  if ($allApproved) {
                    Write-Host "‚úÖ Work Item #${wiId} approved for release."
                    $qualifiedWorkItems += $wiId
                  } else {
                    Write-Host "üö´ Work Item #${wiId} excluded (not all PRs approved)."
                  }
                }

                if (-not $qualifiedWorkItems -or $qualifiedWorkItems.Count -eq 0) {
                  Write-Host "‚ö†Ô∏è No work items qualified for release."
                  exit 0
                }

                Write-Host "üéØ Qualified Work Items: $($qualifiedWorkItems -join ', ')"
                Write-Host "üì¶ Commits to Cherry-Pick: $($cherryPickCommits -join ', ')"

                # --- STEP 3: Create or Update Release Branch ---
                Write-Host "##[section]üîß Creating/Updating branch '${releaseBranch}'..."

                git config --global user.email "build@azure.dev"
                git config --global user.name "Azure DevOps"

                git fetch origin
                $branchExists = git ls-remote --heads origin $releaseBranch

                if ($branchExists) {
                  Write-Host "üì¶ Branch exists. Checking out..."
                  git checkout $releaseBranch
                  git pull origin $releaseBranch
                } else {
                  Write-Host "üå± Creating new branch from main..."
                  git checkout main
                  git pull origin main
                  git checkout -b $releaseBranch
                }

                # --- STEP 4: Cherry-Pick PR commits ---
                foreach ($commit in $cherryPickCommits) {
                  try {
                    Write-Host "üîÑ Cherry-picking commit ${commit}..."
                    git cherry-pick $commit
                  } catch {
                    Write-Host "‚ö†Ô∏è Cherry-pick failed for commit ${commit}. Attempting to continue..."
                    git cherry-pick --abort
                  }
                }

                # --- STEP 5: Push release branch ---
                Write-Host "##[section]üì§ Pushing release branch..."
                git push origin $releaseBranch --force-with-lease

                Write-Host "üéâ Release branch '${releaseBranch}' created/updated successfully!"
                Write-Host "‚úÖ Cherry-picked all approved PR commits."
