trigger:
  branches:
    include:
      - main

variables:
  fixVersion: '1.0.0'

stages:
  - stage: ReleaseBranch
    displayName: "Create/Update Release Branch"
    jobs:
      - job: CreateReleaseBranch
        displayName: "Create or Update Release Branch for FixVersion"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            displayName: "Create/Update Release Branch"
            inputs:
              targetType: 'inline'
              pwsh: true
              script: |
                $fixVersion = "${{ variables.fixVersion }}"
                Write-Host "üöÄ Starting release branch update for FixVersion: ${fixVersion}"

                # Use discovered values from Azure DevOps environment
                $orgUrl = "https://pradeepekka.visualstudio.com/"
                $project = "Algo-ds-Py"
                $repo = "algo-ds-py"  # Use just the repo name, not the full path
                $releaseBranch = "release/${fixVersion}"
                $token = "$(System.AccessToken)"
                $headers = @{ 
                    Authorization = "Bearer $token"
                    "Content-Type" = "application/json"
                }

                Write-Host "Using configuration:"
                Write-Host "  Organization: $orgUrl"
                Write-Host "  Project: $project"
                Write-Host "  Repository: $repo"
                Write-Host "  Release Branch: $releaseBranch"

                # Test connection to project
                try {
                    Write-Host "##[section]Testing project connection..."
                    # Use the correct API format for Visual Studio URLs
                    $projectUrl = "$orgUrl$project/_apis/projects/$project`?api-version=7.0"
                    Write-Host "Testing URL: $projectUrl"
                    $projectInfo = Invoke-RestMethod -Uri $projectUrl -Method Get -Headers $headers
                    Write-Host "‚úÖ Successfully connected to project: $($projectInfo.name)"
                } catch {
                    Write-Host "##[error]‚ùå Failed to connect to project: $($_.Exception.Message)"
                    Write-Host "Full error details: $($_.Exception.Response)"
                    exit 1
                }

                # --- STEP 1: Check available work item fields ---
                Write-Host "##[section]üîç Checking available work item fields..."
                try {
                    $fieldsUrl = "$orgUrl$project/_apis/wit/fields?api-version=7.0"
                    $fields = Invoke-RestMethod -Uri $fieldsUrl -Headers $headers
                    Write-Host "Available custom fields:"
                    $customFields = $fields.value | Where-Object { $_.referenceName -like "Custom.*" -or $_.referenceName -like "Microsoft.VSTS*" }
                    foreach ($field in $customFields) {
                        Write-Host "  - $($field.referenceName): $($field.name)"
                    }
                } catch {
                    Write-Host "‚ö†Ô∏è Could not fetch fields: $($_.Exception.Message)"
                }

                # --- STEP 2: Fetch work items ---
                Write-Host "##[section]üîç Fetching work items with FixVersion = ${fixVersion}..."
                
                # Try different possible field names for FixVersion
                $possibleFields = @("Custom.FixVersion", "Microsoft.VSTS.Common.FixVersion", "Custom.ReleaseVersion", "System.Tags")
                $wiqlResult = $null
                $usedField = ""

                foreach ($fieldName in $possibleFields) {
                    Write-Host "Trying field: $fieldName"
                    $wiql = @{
                        query = "SELECT [System.Id], [System.Title] FROM WorkItems WHERE [System.TeamProject] = '$project' AND [$fieldName] = '$fixVersion'"
                    } | ConvertTo-Json
                    
                    $wiqlUrl = "$orgUrl$project/_apis/wit/wiql?api-version=7.0"
                    
                    try {
                        $result = Invoke-RestMethod -Uri $wiqlUrl -Method Post -Headers $headers -Body $wiql -ContentType "application/json"
                        
                        if ($result.workItems -and $result.workItems.Count -gt 0) {
                            Write-Host "‚úÖ Found $($result.workItems.Count) work items using field: $fieldName"
                            $wiqlResult = $result
                            $usedField = $fieldName
                            break
                        } else {
                            Write-Host "‚ö†Ô∏è No work items found with field: $fieldName"
                        }
                    } catch {
                        Write-Host "‚ùå Field '$fieldName' not found or not accessible: $($_.Exception.Message)"
                    }
                }
                
                if (-not $wiqlResult -or $wiqlResult.workItems.Count -eq 0) {
                    Write-Host "##[warning]No work items found for FixVersion '$fixVersion' with any known field."
                    Write-Host "Let's try to find ALL work items in the project to see what's available:"
                    
                    # Get all recent work items to see what we have
                    $allWiql = @{
                        query = "SELECT [System.Id], [System.Title], [System.State] FROM WorkItems WHERE [System.TeamProject] = '$project' AND [System.ChangedDate] >= @today-30 ORDER BY [System.ChangedDate] DESC"
                    } | ConvertTo-Json
                    
                    try {
                        $allResult = Invoke-RestMethod -Uri $wiqlUrl -Method Post -Headers $headers -Body $allWiql -ContentType "application/json"
                        Write-Host "Recent work items in project (last 30 days):"
                        foreach ($wi in $allResult.workItems) {
                            Write-Host "  - ID: $($wi.id), Title: $($wi.fields.'System.Title')"
                        }
                    } catch {
                        Write-Host "Could not fetch recent work items: $($_.Exception.Message)"
                    }
                    
                    exit 0
                }

                Write-Host "##[section]Using field '$usedField' for FixVersion filtering"
                Write-Host "Found $($wiqlResult.workItems.Count) work items:"
                foreach ($wi in $wiqlResult.workItems) {
                    Write-Host "  - ID: $($wi.id), Title: $($wi.fields.'System.Title')"
                }

                # --- STEP 3: Process work items ---
                $finalWorkItems = @()
                
                foreach ($wi in $wiqlResult.workItems) {
                    $wiId = $wi.id
                    Write-Host "##[section]Processing Work Item #${wiId}: $($wi.fields.'System.Title')..."
                    
                    $relationsUrl = "$orgUrl$project/_apis/wit/workitems/$wiId`?`$expand=relations&api-version=7.0"
                    
                    try {
                        $wiDetails = Invoke-RestMethod -Uri $relationsUrl -Headers $headers
                        Write-Host "‚úÖ Successfully fetched work item details"
                        
                        # Check if work item has relations
                        if ($wiDetails.relations) {
                            $prLinks = $wiDetails.relations | Where-Object { $_.rel -eq "ArtifactLink" -and $_.url -like "*PullRequest*" }
                            Write-Host "Found $($prLinks.Count) linked PR(s)"
                        } else {
                            $prLinks = @()
                            Write-Host "No relations found for work item"
                        }

                        if (-not $prLinks) {
                            Write-Host "‚ö†Ô∏è Work Item #${wiId} has no linked PRs. Skipping..."
                            continue
                        }
                        
                        $allApproved = $true
                        
                        foreach ($prLink in $prLinks) {
                            if ($prLink.url -match "vstfs:///Git/PullRequestId/(\d+)") {
                                $prId = $matches[1]
                                $prApiUrl = "$orgUrl$project/_apis/git/repositories/$repo/pullRequests/$prId`?api-version=7.0"
                                Write-Host "  Checking PR #${prId}..."
                                
                                try {
                                    $pr = Invoke-RestMethod -Uri $prApiUrl -Headers $headers

                                    Write-Host "  PR Status: $($pr.status), Merge Status: $($pr.mergeStatus)"
                                    
                                    if ($pr.status -ne "completed" -or $pr.mergeStatus -ne "succeeded") {
                                        Write-Host "  ‚ùå PR #${prId} for Work Item #${wiId} is not approved or merged yet."
                                        $allApproved = $false
                                        break
                                    } else {
                                        Write-Host "  ‚úÖ PR #${prId} is completed and merged"
                                    }
                                } catch {
                                    Write-Host "  ‚ùå Failed to fetch PR #${prId}: $($_.Exception.Message)"
                                    $allApproved = $false
                                    break
                                }
                            }
                        }
                        
                        if ($allApproved) {
                            Write-Host "‚úÖ Work Item #${wiId} has all PRs approved. Adding to release."
                            $finalWorkItems += $wiId
                        } else {
                            Write-Host "üö´ Skipping Work Item #${wiId} because not all PRs approved."
                        }
                        
                    } catch {
                        Write-Host "##[error]‚ùå Failed to process Work Item #${wiId}: $($_.Exception.Message)"
                        Write-Host "URL attempted: $relationsUrl"
                    }
                }
                
                if (-not $finalWorkItems) {
                    Write-Host "##[warning]‚ö†Ô∏è No work items qualify for release."
                    Write-Host "Processed $($wiqlResult.workItems.Count) work items, but none had all PRs approved and merged."
                    exit 0
                }

                Write-Host "##[section]üéØ Qualified work items for release: $($finalWorkItems -join ', ')"

                # --- STEP 4: Create/Update release branch ---
                Write-Host "##[section]üîß Preparing release branch: ${releaseBranch}"
                
                # Configure git
                git config --global user.email "build@azure.dev"
                git config --global user.name "Azure DevOps"
                
                git fetch origin
                $branchExists = git ls-remote --heads origin $releaseBranch

                if ($branchExists) {
                    Write-Host "üì¶ Release branch exists. Updating..."
                    git checkout $releaseBranch
                    git pull origin $releaseBranch
                } else {
                    Write-Host "üå± Creating new release branch from main..."
                    git checkout main
                    git pull origin main
                    git checkout -b $releaseBranch
                }

                # --- STEP 5: Merge approved PR commits ---
                Write-Host "##[section]üîÄ Merging approved PR commits into release branch..."
                
                foreach ($wiId in $finalWorkItems) {
                    Write-Host "Processing Work Item #${wiId} for merging..."
                    $relationsUrl = "$orgUrl$project/_apis/wit/workitems/$wiId`?`$expand=relations&api-version=7.0"
                    
                    try {
                        $wiDetails = Invoke-RestMethod -Uri $relationsUrl -Headers $headers
                        $prLinks = $wiDetails.relations | Where-Object { $_.rel -eq "ArtifactLink" -and $_.url -like "*PullRequest*" }

                        foreach ($prLink in $prLinks) {
                            if ($prLink.url -match "vstfs:///Git/PullRequestId/(\d+)") {
                                $prId = $matches[1]
                                $prApiUrl = "$orgUrl$project/_apis/git/repositories/$repo/pullRequests/$prId`?api-version=7.0"
                                
                                try {
                                    $pr = Invoke-RestMethod -Uri $prApiUrl -Headers $headers

                                    if ($pr.status -eq "completed" -and $pr.mergeStatus -eq "succeeded") {
                                        $sourceBranch = $pr.sourceRefName.Replace("refs/heads/", "")
                                        Write-Host "  Merging commits from branch: ${sourceBranch}"
                                        
                                        git fetch origin $sourceBranch
                                        $mergeOutput = git merge origin/$sourceBranch --no-edit 2>&1
                                        
                                        if ($LASTEXITCODE -eq 0) {
                                            Write-Host "  ‚úÖ Successfully merged ${sourceBranch}"
                                        } else {
                                            Write-Host "  ‚ö†Ô∏è Merge had issues with ${sourceBranch}: $mergeOutput"
                                            # Continue with next merge even if there are conflicts
                                        }
                                    }
                                } catch {
                                    Write-Host "  ‚ö†Ô∏è Failed to process PR #${prId}: $($_.Exception.Message)"
                                }
                            }
                        }
                    } catch {
                        Write-Host "‚ö†Ô∏è Failed to process work item #${wiId} for merging: $($_.Exception.Message)"
                    }
                }

                # --- STEP 6: Push changes ---
                Write-Host "##[section]üì§ Pushing changes to remote..."
                git push origin $releaseBranch
                
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "##[section]üéâ Release branch ${releaseBranch} updated successfully!"
                    Write-Host "##[section]üìã Summary:"
                    Write-Host "   - Fix Version: ${fixVersion}"
                    Write-Host "   - Work Items Found: $($wiqlResult.workItems.Count)"
                    Write-Host "   - Work Items Included: $($finalWorkItems.Count)"
                    Write-Host "   - Release Branch: ${releaseBranch}"
                } else {
                    Write-Host "##[error]‚ùå Failed to push release branch"
                    exit 1
                }